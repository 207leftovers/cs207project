
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D7D1BCF469A7160DABB9E0C3456A50E8'
    
_lr_action_items = {'$end':([1,2,3,4,7,8,18,27,],[-4,0,-5,-1,-3,-2,-6,-7,]),'NUMBER':([10,12,14,15,16,17,20,22,23,24,26,28,29,30,31,34,37,38,39,40,42,43,45,46,49,51,52,53,54,55,56,],[12,-27,12,-26,-9,-28,12,12,12,12,12,-8,12,12,-30,-13,12,12,-21,12,-11,12,-22,-29,-12,-24,-20,-23,-10,-25,-19,]),'OP_ADD':([13,],[20,]),'IMPORT':([5,],[9,]),'ASSIGN':([13,],[19,]),'RPAREN':([11,12,15,17,21,23,25,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,],[18,-27,-26,-28,34,39,42,45,-30,-17,-13,49,-15,51,52,-21,53,54,-11,55,56,-22,-29,-12,-14,-24,-20,-23,-10,-25,-19,58,-16,]),'OP_SUB':([13,],[24,]),'LPAREN':([0,1,3,4,7,8,10,12,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,45,46,49,50,51,52,53,54,55,56,58,],[5,-4,-5,5,-3,-2,13,-27,13,-26,-9,-28,-6,13,33,13,13,13,33,13,-7,-8,13,13,-30,-17,-13,33,-15,13,13,-21,13,33,-11,13,-22,-29,-12,-14,-24,-20,-23,-10,-25,-19,-16,]),'RBRACE':([12,14,15,16,17,28,34,39,42,45,49,51,52,53,54,55,56,],[-27,27,-26,-9,-28,-8,-13,-21,-11,-22,-12,-24,-20,-23,-10,-25,-19,]),'OUTPUT':([13,],[21,]),'STRING':([10,12,14,15,16,17,20,22,23,24,26,28,29,30,31,34,37,38,39,40,42,43,45,46,49,51,52,53,54,55,56,],[17,-27,17,-26,-9,-28,17,17,17,17,17,-8,17,17,-30,-13,17,17,-21,17,-11,17,-22,-29,-12,-24,-20,-23,-10,-25,-19,]),'ID':([6,9,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[10,11,15,-27,23,15,-26,-9,-28,29,15,32,15,15,15,32,15,-8,15,15,-30,-17,48,-13,32,-15,15,15,-21,15,32,-11,15,-22,-29,57,-18,-12,-14,-24,-20,-23,-10,-25,-19,-16,]),'OP_MUL':([13,],[22,]),'INPUT':([13,],[25,]),'LBRACE':([0,1,3,4,7,8,18,27,],[6,-4,-5,6,-3,-2,-6,-7,]),'OP_DIV':([13,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'import_statement':([0,4,],[1,7,]),'type':([33,],[47,]),'program':([0,],[2,]),'expression_list':([10,],[14,]),'component':([0,4,],[3,8,]),'statement_list':([0,],[4,]),'parameter_list':([20,22,23,24,26,],[30,37,38,40,43,]),'expression':([10,14,20,22,23,24,26,29,30,37,38,40,43,],[16,28,31,31,31,31,31,44,46,46,46,46,46,]),'declaration_list':([21,25,],[35,41,]),'declaration':([21,25,35,41,],[36,36,50,50,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
