
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D7D1BCF469A7160DABB9E0C3456A50E8'
    
_lr_action_items = {'ASSIGN':([12,],[19,]),'OP_ADD':([12,],[20,]),'$end':([1,2,5,6,7,8,18,28,],[-1,-4,-5,0,-3,-2,-6,-7,]),'LPAREN':([0,1,2,5,7,8,10,13,14,15,16,17,18,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,45,46,47,48,49,50,51,54,55,56,58,],[3,3,-4,-5,-3,-2,12,-27,-26,-28,12,-9,-6,12,12,12,12,39,39,12,-8,-7,12,12,-30,12,12,12,-21,-17,39,-11,-15,39,-13,12,-22,-29,-23,-24,-20,-10,-14,-12,-25,-19,-16,]),'IMPORT':([3,],[9,]),'NUMBER':([10,13,14,15,16,17,20,21,22,23,26,27,29,30,31,32,33,34,35,38,42,43,45,46,47,48,49,50,54,55,56,],[13,-27,-26,-28,13,-9,13,13,13,13,13,-8,13,13,-30,13,13,13,-21,-11,-13,13,-22,-29,-23,-24,-20,-10,-12,-25,-19,]),'INPUT':([12,],[24,]),'OP_MUL':([12,],[22,]),'ID':([4,9,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[10,11,14,23,-27,-26,-28,14,-9,29,14,14,14,14,36,36,14,-8,14,14,-30,14,14,14,-21,-17,36,-11,52,-15,36,-13,14,-22,-29,-23,-24,-20,-10,-14,-18,57,-12,-25,-19,-16,]),'RPAREN':([11,13,14,15,23,24,25,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[18,-27,-26,-28,35,38,42,45,-30,47,48,49,-21,-17,50,-11,-15,54,-13,55,56,-22,-29,-23,-24,-20,-10,-14,-12,-25,-19,58,-16,]),'STRING':([10,13,14,15,16,17,20,21,22,23,26,27,29,30,31,32,33,34,35,38,42,43,45,46,47,48,49,50,54,55,56,],[15,-27,-26,-28,15,-9,15,15,15,15,15,-8,15,15,-30,15,15,15,-21,-11,-13,15,-22,-29,-23,-24,-20,-10,-12,-25,-19,]),'LBRACE':([0,1,2,5,7,8,18,28,],[4,4,-4,-5,-3,-2,-6,-7,]),'OP_SUB':([12,],[21,]),'OUTPUT':([12,],[25,]),'OP_DIV':([12,],[26,]),'RBRACE':([13,14,15,16,17,27,35,38,42,45,47,48,49,50,54,55,56,],[-27,-26,-28,28,-9,-8,-21,-11,-13,-22,-23,-24,-20,-10,-12,-25,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([24,25,37,41,],[40,40,51,51,]),'expression':([10,16,20,21,22,23,26,29,30,32,33,34,43,],[17,27,31,31,31,31,31,44,46,46,46,46,46,]),'parameter_list':([20,21,22,23,26,],[30,32,33,34,43,]),'import_statement':([0,1,],[2,7,]),'component':([0,1,],[5,8,]),'expression_list':([10,],[16,]),'declaration_list':([24,25,],[37,41,]),'statement_list':([0,],[1,]),'type':([39,],[53,]),'program':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
