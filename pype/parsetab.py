
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E1FCB2EDDF1216D4CA039394CC93A7CE'
    
_lr_action_items = {'OP_MUL':([15,],[21,]),'LBRACE':([0,1,3,6,7,8,18,20,],[4,4,-5,-4,-2,-3,-6,-7,]),'RPAREN':([11,12,16,17,23,24,27,29,30,31,32,33,34,35,36,37,40,41,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,],[18,-26,-28,-27,32,34,41,-30,44,46,-21,47,-11,-15,-17,48,53,-13,54,55,-24,-29,-23,-20,-10,-14,57,-22,-12,-25,58,-19,-16,]),'OP_SUB':([15,],[22,]),'ID':([4,9,10,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[10,11,12,-26,-9,12,23,-28,-27,-8,12,12,12,36,39,12,36,12,-30,12,12,-21,12,-11,-15,-17,36,50,12,12,-13,36,12,-24,-29,-23,-20,-10,-14,-18,56,-22,-12,-25,-19,-16,]),'STRING':([10,12,13,14,16,17,19,21,22,23,26,28,29,30,31,32,33,34,39,40,41,43,44,45,46,47,48,53,54,55,57,],[16,-26,-9,16,-28,-27,-8,16,16,16,16,16,-30,16,16,-21,16,-11,16,16,-13,16,-24,-29,-23,-20,-10,-22,-12,-25,-19,]),'ASSIGN':([15,],[25,]),'OP_ADD':([15,],[26,]),'OUTPUT':([15,],[27,]),'OP_DIV':([15,],[28,]),'INPUT':([15,],[24,]),'LPAREN':([0,1,3,6,7,8,10,12,13,14,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,53,54,55,57,58,],[2,2,-5,-4,-2,-3,15,-26,-9,15,-28,-27,-6,-8,-7,15,15,15,38,15,38,15,-30,15,15,-21,15,-11,-15,-17,38,15,15,-13,38,15,-24,-29,-23,-20,-10,-14,-22,-12,-25,-19,-16,]),'NUMBER':([10,12,13,14,16,17,19,21,22,23,26,28,29,30,31,32,33,34,39,40,41,43,44,45,46,47,48,53,54,55,57,],[17,-26,-9,17,-28,-27,-8,17,17,17,17,17,-30,17,17,-21,17,-11,17,17,-13,17,-24,-29,-23,-20,-10,-22,-12,-25,-19,]),'$end':([1,3,5,6,7,8,18,20,],[-1,-5,0,-4,-2,-3,-6,-7,]),'RBRACE':([12,13,14,16,17,19,32,34,41,44,46,47,48,53,54,55,57,],[-26,-9,20,-28,-27,-8,-21,-11,-13,-24,-23,-20,-10,-22,-12,-25,-19,]),'IMPORT':([2,],[9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_list':([10,],[14,]),'declaration':([24,27,37,42,],[35,35,49,49,]),'parameter_list':([21,22,23,26,28,],[30,31,33,40,43,]),'statement_list':([0,],[1,]),'component':([0,1,],[3,7,]),'declaration_list':([24,27,],[37,42,]),'expression':([10,14,21,22,23,26,28,30,31,33,39,40,43,],[13,19,29,29,29,29,29,45,45,45,52,45,45,]),'program':([0,],[5,]),'type':([38,],[51,]),'import_statement':([0,1,],[6,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
