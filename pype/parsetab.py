
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D7D1BCF469A7160DABB9E0C3456A50E8'
    
_lr_action_items = {'ID':([4,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,57,58,],[9,11,17,-26,-9,18,-28,11,-27,11,32,11,38,11,32,11,11,-8,11,-30,-21,-17,-13,-15,32,49,11,11,11,-11,32,11,11,-29,-20,-12,-14,56,-18,-24,-23,-10,-25,-22,-19,-16,]),'IMPORT':([5,],[10,]),'OP_ADD':([13,],[25,]),'OUTPUT':([13,],[19,]),'OP_MUL':([13,],[20,]),'RPAREN':([11,14,16,17,18,19,23,29,30,31,32,33,34,35,37,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[-26,-28,-27,28,31,33,40,45,-30,-21,-17,-13,-15,46,50,52,-11,53,54,55,-29,-20,-12,-14,-24,57,-23,-10,-25,-22,58,-19,-16,]),'LBRACE':([0,2,3,6,7,8,27,28,],[4,-4,4,-5,-3,-2,-7,-6,]),'$end':([1,2,3,6,7,8,27,28,],[0,-4,-1,-5,-3,-2,-7,-6,]),'OP_SUB':([13,],[22,]),'LPAREN':([0,2,3,6,7,8,9,11,12,14,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,50,52,53,54,55,57,58,],[5,-4,5,-5,-3,-2,13,-26,-9,-28,13,-27,13,36,13,13,36,13,13,-8,-7,-6,13,-30,-21,-17,-13,-15,36,13,13,13,-11,36,13,13,-29,-20,-12,-14,-24,-23,-10,-25,-22,-19,-16,]),'RBRACE':([11,12,14,15,16,26,31,33,40,45,46,50,52,53,54,55,57,],[-26,-9,-28,27,-27,-8,-21,-13,-11,-20,-12,-24,-23,-10,-25,-22,-19,]),'STRING':([9,11,12,14,15,16,18,20,22,24,25,26,29,30,31,33,37,38,39,40,42,43,44,45,46,50,52,53,54,55,57,],[14,-26,-9,-28,14,-27,14,14,14,14,14,-8,14,-30,-21,-13,14,14,14,-11,14,14,-29,-20,-12,-24,-23,-10,-25,-22,-19,]),'ASSIGN':([13,],[21,]),'INPUT':([13,],[23,]),'OP_DIV':([13,],[24,]),'NUMBER':([9,11,12,14,15,16,18,20,22,24,25,26,29,30,31,33,37,38,39,40,42,43,44,45,46,50,52,53,54,55,57,],[16,-26,-9,-28,16,-27,16,16,16,16,16,-8,16,-30,-21,-13,16,16,16,-11,16,16,-29,-20,-12,-24,-23,-10,-25,-22,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'import_statement':([0,3,],[2,7,]),'expression':([9,15,18,20,22,24,25,29,37,38,39,42,43,],[12,26,30,30,30,30,30,44,44,51,44,44,44,]),'statement_list':([0,],[3,]),'type':([36,],[48,]),'declaration':([19,23,35,41,],[34,34,47,47,]),'expression_list':([9,],[15,]),'declaration_list':([19,23,],[35,41,]),'component':([0,3,],[6,8,]),'parameter_list':([18,20,22,24,25,],[29,37,39,42,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
