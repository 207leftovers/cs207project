
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '371EF72B57DF7D01BB0A145AD73D5ADC'
    
_lr_action_items = {'$end':([2,3,5,6,8,9,19,28,],[-1,0,-4,-5,-3,-2,-7,-6,]),'OP_MUL':([13,],[25,]),'INPUT':([13,],[27,]),'LPAREN':([0,2,5,6,7,8,9,11,12,14,15,16,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,47,48,49,50,53,54,55,56,58,],[4,4,-4,-5,13,-3,-2,13,-9,-26,-27,-28,-8,-7,13,13,13,13,13,40,40,-6,13,-30,-21,13,13,13,13,13,-13,-17,-15,40,-11,40,-29,-20,-25,-22,-23,-24,-12,-14,-10,-19,-16,]),'OP_DIV':([13,],[22,]),'ASSIGN':([13,],[21,]),'OP_SUB':([13,],[24,]),'OP_ADD':([13,],[23,]),'ID':([1,7,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,58,],[7,14,17,14,-9,20,-26,-27,-28,-8,14,32,14,14,14,14,38,38,14,-30,-21,14,14,14,14,14,-13,-17,-15,52,38,-11,38,-29,-20,-25,-22,-23,-24,57,-18,-12,-14,-10,-19,-16,]),'IMPORT':([4,],[10,]),'NUMBER':([7,11,12,14,15,16,18,20,22,23,24,25,29,30,31,32,33,34,35,36,37,42,44,45,47,48,49,50,53,55,56,],[15,15,-9,-26,-27,-28,-8,15,15,15,15,15,15,-30,-21,15,15,15,15,15,-13,-11,-29,-20,-25,-22,-23,-24,-12,-10,-19,]),'LBRACE':([0,2,5,6,8,9,19,28,],[1,1,-4,-5,-3,-2,-7,-6,]),'OUTPUT':([13,],[26,]),'RBRACE':([11,12,14,15,16,18,31,37,42,45,47,48,49,50,53,55,56,],[19,-9,-26,-27,-28,-8,-21,-13,-11,-20,-25,-22,-23,-24,-12,-10,-19,]),'RPAREN':([14,15,16,17,20,26,27,29,30,31,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,],[-26,-27,-28,28,31,37,42,45,-30,-21,47,48,49,50,-13,-17,-15,53,-11,55,-29,-20,56,-25,-22,-23,-24,-12,-14,-10,-19,58,-16,]),'STRING':([7,11,12,14,15,16,18,20,22,23,24,25,29,30,31,32,33,34,35,36,37,42,44,45,47,48,49,50,53,55,56,],[16,16,-9,-26,-27,-28,-8,16,16,16,16,16,16,-30,-21,16,16,16,16,16,-13,-11,-29,-20,-25,-22,-23,-24,-12,-10,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([40,],[51,]),'expression_list':([7,],[11,]),'declaration_list':([26,27,],[41,43,]),'parameter_list':([20,22,23,24,25,],[29,33,34,35,36,]),'expression':([7,11,20,22,23,24,25,29,32,33,34,35,36,],[12,18,30,30,30,30,30,44,46,44,44,44,44,]),'declaration':([26,27,41,43,],[39,39,54,54,]),'program':([0,],[3,]),'statement_list':([0,],[2,]),'import_statement':([0,2,],[5,8,]),'component':([0,2,],[6,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
