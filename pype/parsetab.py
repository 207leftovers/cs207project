
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '55C53B9434ED5FC68BBE31AE8D09ED67'
    
_lr_action_items = {'NUMBER':([10,12,14,15,16,17,21,22,23,24,25,28,32,35,36,37,38,39,40,41,42,43,45,48,49,50,51,52,53,54,57,],[12,-27,-26,-28,-9,12,12,12,12,12,12,-8,-13,-11,-30,12,12,12,-21,12,12,12,-12,-10,-22,-29,-23,-24,-20,-25,-19,]),'RBRACE':([12,14,15,16,17,28,32,35,40,45,48,49,51,52,53,54,57,],[-27,-26,-28,-9,27,-8,-13,-11,-21,-12,-10,-22,-23,-24,-20,-25,-19,]),'OP_ADD':([13,],[21,]),'INPUT':([13,],[20,]),'LBRACE':([0,1,2,4,8,9,18,27,],[6,-4,-5,6,-3,-2,-6,-7,]),'LPAREN':([0,1,2,4,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,57,58,],[3,-4,-5,3,-3,-2,13,-27,-26,-28,-9,13,-6,30,30,13,13,13,13,13,-7,-8,30,-15,-13,-17,30,-11,-30,13,13,13,-21,13,13,13,-14,-12,-10,-22,-29,-23,-24,-20,-25,-19,-16,]),'RPAREN':([11,12,14,15,19,20,24,29,31,32,33,34,35,36,37,38,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-27,-26,-28,32,35,40,45,-15,-13,-17,48,-11,-30,49,51,52,-21,53,54,-14,-12,-10,-22,-29,-23,-24,-20,-25,57,58,-19,-16,]),'OUTPUT':([13,],[19,]),'ID':([6,7,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[10,11,14,-27,24,-26,-28,-9,14,33,33,14,14,14,14,14,43,-8,33,47,-15,-13,-17,33,-11,-30,14,14,14,-21,14,14,14,-14,-12,56,-18,-10,-22,-29,-23,-24,-20,-25,-19,-16,]),'ASSIGN':([13,],[26,]),'$end':([1,2,4,5,8,9,18,27,],[-4,-5,-1,0,-3,-2,-6,-7,]),'OP_SUB':([13,],[22,]),'OP_DIV':([13,],[25,]),'OP_MUL':([13,],[23,]),'IMPORT':([3,],[7,]),'STRING':([10,12,14,15,16,17,21,22,23,24,25,28,32,35,36,37,38,39,40,41,42,43,45,48,49,50,51,52,53,54,57,],[15,-27,-26,-28,-9,15,15,15,15,15,15,-8,-13,-11,-30,15,15,15,-21,15,15,15,-12,-10,-22,-29,-23,-24,-20,-25,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'import_statement':([0,4,],[1,8,]),'component':([0,4,],[2,9,]),'type':([30,],[46,]),'declaration':([19,20,29,34,],[31,31,44,44,]),'statement_list':([0,],[4,]),'declaration_list':([19,20,],[29,34,]),'parameter_list':([21,22,23,24,25,],[37,38,39,41,42,]),'program':([0,],[5,]),'expression':([10,17,21,22,23,24,25,37,38,39,41,42,43,],[16,28,36,36,36,36,36,50,50,50,50,50,55,]),'expression_list':([10,],[17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
