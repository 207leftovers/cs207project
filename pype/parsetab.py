
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'IMPORT':([3,],[7,]),'ID':([4,7,8,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[8,11,12,-26,-9,19,-27,-28,12,12,12,33,33,12,12,12,43,-8,-30,12,-21,12,-17,-15,47,33,-13,33,-11,12,12,12,12,-29,-20,-24,-18,56,-14,-12,-10,-25,-23,-22,-19,-16,]),'OP_MUL':([14,],[20,]),'LBRACE':([0,2,5,6,9,10,18,28,],[4,-4,-5,4,-3,-2,-6,-7,]),'ASSIGN':([14,],[26,]),'OP_DIV':([14,],[23,]),'NUMBER':([8,12,13,15,16,17,19,20,23,24,25,27,29,30,31,32,37,39,40,41,42,43,44,45,46,50,51,52,53,54,57,],[15,-26,-9,-27,-28,15,15,15,15,15,15,-8,-30,15,-21,15,-13,-11,15,15,15,15,-29,-20,-24,-12,-10,-25,-23,-22,-19,]),'$end':([1,2,5,6,9,10,18,28,],[0,-4,-5,-1,-3,-2,-6,-7,]),'OP_SUB':([14,],[24,]),'RBRACE':([12,13,15,16,17,27,31,37,39,45,46,50,51,52,53,54,57,],[-26,-9,-27,-28,28,-8,-21,-13,-11,-20,-24,-12,-10,-25,-23,-22,-19,]),'STRING':([8,12,13,15,16,17,19,20,23,24,25,27,29,30,31,32,37,39,40,41,42,43,44,45,46,50,51,52,53,54,57,],[16,-26,-9,-27,-28,16,16,16,16,16,16,-8,-30,16,-21,16,-13,-11,16,16,16,16,-29,-20,-24,-12,-10,-25,-23,-22,-19,]),'LPAREN':([0,2,5,6,8,9,10,12,13,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,57,58,],[3,-4,-5,3,14,-3,-2,-26,-9,-27,-28,14,-6,14,14,35,35,14,14,14,-8,-7,-30,14,-21,14,-17,-15,35,-13,35,-11,14,14,14,14,-29,-20,-24,-14,-12,-10,-25,-23,-22,-19,-16,]),'OUTPUT':([14,],[21,]),'INPUT':([14,],[22,]),'RPAREN':([11,12,15,16,19,21,22,29,30,31,32,33,34,36,37,38,39,40,41,42,44,45,46,49,50,51,52,53,54,55,56,57,58,],[18,-26,-27,-28,31,37,39,-30,45,-21,46,-17,-15,50,-13,51,-11,52,53,54,-29,-20,-24,-14,-12,-10,-25,-23,-22,57,58,-19,-16,]),'OP_ADD':([14,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([21,22,36,38,],[34,34,49,49,]),'program':([0,],[1,]),'declaration_list':([21,22,],[36,38,]),'import_statement':([0,6,],[2,9,]),'expression_list':([8,],[17,]),'component':([0,6,],[5,10,]),'expression':([8,17,19,20,23,24,25,30,32,40,41,42,43,],[13,27,29,29,29,29,29,44,44,44,44,44,55,]),'statement_list':([0,],[6,]),'type':([35,],[48,]),'parameter_list':([19,20,23,24,25,],[30,32,40,41,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
