
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'B7DA2FE6C22431AB95D14A63E4FE0078'
    
_lr_action_items = {'$end':([1,2,5,6,9,10,18,20,],[-4,0,-5,-1,-3,-2,-6,-7,]),'OP_SUB':([15,],[24,]),'STRING':([8,12,13,14,16,17,19,22,24,25,26,27,29,30,31,32,36,38,39,40,41,43,45,46,47,51,52,53,54,55,56,],[14,-26,14,-28,-9,-27,-8,14,14,14,14,14,14,14,-30,-21,-13,14,14,14,14,-11,-29,-20,-12,-23,-24,-22,-25,-10,-19,]),'ID':([4,7,8,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[8,11,12,-26,12,-28,22,-9,-27,-8,29,12,33,12,12,12,12,33,12,12,-30,-21,-17,33,49,-13,-15,12,12,12,12,33,-11,-29,-20,-12,-14,-18,57,-23,-24,-22,-25,-10,-19,-16,]),'OUTPUT':([15,],[23,]),'OP_DIV':([15,],[27,]),'LBRACE':([0,1,5,6,9,10,18,20,],[4,-4,-5,4,-3,-2,-6,-7,]),'OP_MUL':([15,],[25,]),'LPAREN':([0,1,5,6,8,9,10,12,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,45,46,47,48,51,52,53,54,55,56,58,],[3,-4,-5,3,15,-3,-2,-26,15,-28,-9,-27,-6,-8,-7,15,35,15,15,15,15,35,15,15,-30,-21,-17,35,-13,-15,15,15,15,15,35,-11,-29,-20,-12,-14,-23,-24,-22,-25,-10,-19,-16,]),'IMPORT':([3,],[7,]),'RPAREN':([11,12,14,17,22,23,28,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[18,-26,-28,-27,32,36,43,46,-30,-21,-17,47,-13,-15,51,52,53,54,55,-11,56,-29,-20,-12,-14,-23,-24,-22,-25,-10,-19,58,-16,]),'OP_ADD':([15,],[26,]),'ASSIGN':([15,],[21,]),'NUMBER':([8,12,13,14,16,17,19,22,24,25,26,27,29,30,31,32,36,38,39,40,41,43,45,46,47,51,52,53,54,55,56,],[17,-26,17,-28,-9,-27,-8,17,17,17,17,17,17,17,-30,-21,-13,17,17,17,17,-11,-29,-20,-12,-23,-24,-22,-25,-10,-19,]),'INPUT':([15,],[28,]),'RBRACE':([12,13,14,16,17,19,32,36,43,46,47,51,52,53,54,55,56,],[-26,20,-28,-9,-27,-8,-21,-13,-11,-20,-12,-23,-24,-22,-25,-10,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'import_statement':([0,6,],[1,9,]),'program':([0,],[2,]),'type':([35,],[50,]),'expression':([8,13,22,24,25,26,27,29,30,38,39,40,41,],[16,19,31,31,31,31,31,44,45,45,45,45,45,]),'component':([0,6,],[5,10,]),'declaration':([23,28,34,42,],[37,37,48,48,]),'parameter_list':([22,24,25,26,27,],[30,38,39,40,41,]),'declaration_list':([23,28,],[34,42,]),'expression_list':([8,],[13,]),'statement_list':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
