
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'OP_SUB':([12,],[20,]),'LPAREN':([0,2,4,5,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,52,53,54,57,58,],[3,-4,-5,3,-3,-2,12,-28,-26,12,-27,-9,-6,12,12,12,38,38,12,12,-7,-8,12,-30,12,12,-21,-15,-13,38,-17,38,-11,12,12,12,-25,-29,-23,-20,-14,-12,-10,-24,-22,-19,-16,]),'STRING':([10,13,14,15,16,17,19,20,21,24,25,28,29,30,31,32,33,35,40,41,42,43,44,45,46,47,49,52,53,54,57,],[13,-28,-26,13,-27,-9,13,13,13,13,13,-8,13,-30,13,13,-21,-13,-11,13,13,13,-25,-29,-23,-20,-12,-10,-24,-22,-19,]),'RBRACE':([13,14,15,16,17,28,33,35,40,44,46,47,49,52,53,54,57,],[-28,-26,27,-27,-9,-8,-21,-13,-11,-25,-23,-20,-12,-10,-24,-22,-19,]),'OUTPUT':([12,],[22,]),'IMPORT':([3,],[7,]),'LBRACE':([0,2,4,5,8,9,18,27,],[6,-4,-5,6,-3,-2,-6,-7,]),'ID':([6,7,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[10,11,14,21,-28,-26,14,-27,-9,14,14,14,37,37,14,14,43,-8,14,-30,14,14,-21,-15,-13,37,-17,50,37,-11,14,14,14,-25,-29,-23,-20,-14,-12,-18,56,-10,-24,-22,-19,-16,]),'OP_MUL':([12,],[24,]),'RPAREN':([11,13,14,16,21,22,23,29,30,31,32,33,34,35,36,37,39,40,41,42,44,45,46,47,48,49,52,53,54,55,56,57,58,],[18,-28,-26,-27,33,35,40,44,-30,46,47,-21,-15,-13,49,-17,52,-11,53,54,-25,-29,-23,-20,-14,-12,-10,-24,-22,57,58,-19,-16,]),'$end':([1,2,4,5,8,9,18,27,],[0,-4,-5,-1,-3,-2,-6,-7,]),'NUMBER':([10,13,14,15,16,17,19,20,21,24,25,28,29,30,31,32,33,35,40,41,42,43,44,45,46,47,49,52,53,54,57,],[16,-28,-26,16,-27,-9,16,16,16,16,16,-8,16,-30,16,16,-21,-13,-11,16,16,16,-25,-29,-23,-20,-12,-10,-24,-22,-19,]),'INPUT':([12,],[23,]),'OP_DIV':([12,],[19,]),'OP_ADD':([12,],[25,]),'ASSIGN':([12,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'import_statement':([0,5,],[2,8,]),'expression_list':([10,],[15,]),'declaration':([22,23,36,39,],[34,34,48,48,]),'type':([38,],[51,]),'component':([0,5,],[4,9,]),'parameter_list':([19,20,21,24,25,],[29,31,32,41,42,]),'statement_list':([0,],[5,]),'declaration_list':([22,23,],[36,39,]),'expression':([10,15,19,20,21,24,25,29,31,32,41,42,43,],[17,28,30,30,30,30,30,45,45,45,45,45,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
