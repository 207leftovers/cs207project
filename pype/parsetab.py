
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '55C53B9434ED5FC68BBE31AE8D09ED67'
    
_lr_action_items = {'IMPORT':([1,],[7,]),'RBRACE':([12,14,15,16,17,28,32,36,39,47,49,50,52,53,54,55,57,],[-26,-27,-28,27,-9,-8,-13,-21,-11,-12,-25,-20,-10,-24,-23,-22,-19,]),'ID':([3,7,8,12,13,14,15,16,17,19,20,21,22,23,24,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,57,58,],[8,11,12,-26,21,-27,-28,12,-9,33,12,12,38,33,12,12,12,-8,44,33,-15,-13,-17,-30,12,-21,12,12,-11,33,12,12,12,-18,56,-14,-12,-29,-25,-20,-10,-24,-23,-22,-19,-16,]),'NUMBER':([8,12,14,15,16,17,20,21,24,25,26,28,32,34,35,36,37,38,39,41,42,43,47,48,49,50,52,53,54,55,57,],[14,-26,-27,-28,14,-9,14,14,14,14,14,-8,-13,-30,14,-21,14,14,-11,14,14,14,-12,-29,-25,-20,-10,-24,-23,-22,-19,]),'OP_DIV':([13,],[20,]),'ASSIGN':([13,],[22,]),'LBRACE':([0,2,4,5,9,10,18,27,],[3,-4,-5,3,-3,-2,-6,-7,]),'RPAREN':([11,12,14,15,19,21,23,30,31,32,33,34,35,36,37,39,40,41,42,43,46,47,48,49,50,51,52,53,54,55,56,57,58,],[18,-26,-27,-28,32,36,39,47,-15,-13,-17,-30,49,-21,50,-11,52,53,54,55,-14,-12,-29,-25,-20,57,-10,-24,-23,-22,58,-19,-16,]),'OP_MUL':([13,],[24,]),'STRING':([8,12,14,15,16,17,20,21,24,25,26,28,32,34,35,36,37,38,39,41,42,43,47,48,49,50,52,53,54,55,57,],[15,-26,-27,-28,15,-9,15,15,15,15,15,-8,-13,-30,15,-21,15,15,-11,15,15,15,-12,-29,-25,-20,-10,-24,-23,-22,-19,]),'LPAREN':([0,2,4,5,8,9,10,12,14,15,16,17,18,19,20,21,23,24,25,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,50,52,53,54,55,57,58,],[1,-4,-5,1,13,-3,-2,-26,-27,-28,13,-9,-6,29,13,13,29,13,13,13,-7,-8,29,-15,-13,-17,-30,13,-21,13,13,-11,29,13,13,13,-14,-12,-29,-25,-20,-10,-24,-23,-22,-19,-16,]),'OUTPUT':([13,],[19,]),'OP_ADD':([13,],[26,]),'INPUT':([13,],[23,]),'OP_SUB':([13,],[25,]),'$end':([2,4,5,6,9,10,18,27,],[-4,-5,-1,0,-3,-2,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([20,21,24,25,26,],[35,37,41,42,43,]),'import_statement':([0,5,],[2,9,]),'type':([29,],[45,]),'expression_list':([8,],[16,]),'declaration_list':([19,23,],[30,40,]),'declaration':([19,23,30,40,],[31,31,46,46,]),'component':([0,5,],[4,10,]),'expression':([8,16,20,21,24,25,26,35,37,38,41,42,43,],[17,28,34,34,34,34,34,48,48,51,48,48,48,]),'statement_list':([0,],[5,]),'program':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
