
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'B7DA2FE6C22431AB95D14A63E4FE0078'
    
_lr_action_items = {'$end':([1,2,3,6,9,10,18,19,],[-5,0,-4,-1,-2,-3,-6,-7,]),'OP_MUL':([13,],[27,]),'LPAREN':([0,1,3,6,8,9,10,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,57,58,],[4,-5,-4,4,13,-2,-3,13,-28,-27,-26,-9,-6,-7,-8,32,13,13,32,13,13,13,32,-17,-13,-15,-30,13,13,32,-11,13,-21,13,13,13,-12,-14,-29,-22,-23,-10,-20,-25,-24,-19,-16,]),'ASSIGN':([13,],[28,]),'OUTPUT':([13,],[21,]),'RBRACE':([12,14,15,16,17,20,31,38,40,44,49,50,51,52,53,54,57,],[19,-28,-27,-26,-9,-8,-13,-11,-21,-12,-22,-23,-10,-20,-25,-24,-19,]),'OP_SUB':([13,],[23,]),'NUMBER':([8,12,14,15,16,17,20,22,23,25,26,27,31,34,35,36,38,39,40,41,42,43,44,48,49,50,51,52,53,54,57,],[15,15,-28,-27,-26,-9,-8,15,15,15,15,15,-13,-30,15,15,-11,15,-21,15,15,15,-12,-29,-22,-23,-10,-20,-25,-24,-19,]),'INPUT':([13,],[24,]),'ID':([5,7,8,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[8,11,16,16,25,-28,-27,-26,-9,-8,30,16,16,30,16,16,16,43,30,-17,-13,46,-15,-30,16,16,30,-11,16,-21,16,16,16,-12,-14,-18,56,-29,-22,-23,-10,-20,-25,-24,-19,-16,]),'RPAREN':([11,14,15,16,21,24,25,29,30,31,33,34,35,36,37,38,39,40,41,42,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-28,-27,-26,31,38,40,44,-17,-13,-15,-30,49,50,51,-11,52,-21,53,54,-12,-14,-29,-22,-23,-10,-20,-25,-24,57,58,-19,-16,]),'STRING':([8,12,14,15,16,17,20,22,23,25,26,27,31,34,35,36,38,39,40,41,42,43,44,48,49,50,51,52,53,54,57,],[14,14,-28,-27,-26,-9,-8,14,14,14,14,14,-13,-30,14,14,-11,14,-21,14,14,14,-12,-29,-22,-23,-10,-20,-25,-24,-19,]),'OP_DIV':([13,],[26,]),'IMPORT':([4,],[7,]),'OP_ADD':([13,],[22,]),'LBRACE':([0,1,3,6,9,10,18,19,],[5,-5,-4,5,-2,-3,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,6,],[1,9,]),'expression':([8,12,22,23,25,26,27,35,36,39,41,42,43,],[17,20,34,34,34,34,34,48,48,48,48,48,55,]),'program':([0,],[2,]),'import_statement':([0,6,],[3,10,]),'parameter_list':([22,23,25,26,27,],[35,36,39,41,42,]),'declaration':([21,24,29,37,],[33,33,45,45,]),'type':([32,],[47,]),'declaration_list':([21,24,],[29,37,]),'statement_list':([0,],[6,]),'expression_list':([8,],[12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
