
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E1FCB2EDDF1216D4CA039394CC93A7CE'
    
_lr_action_items = {'LPAREN':([0,2,3,4,8,9,10,13,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,54,55,57,58,],[1,-5,-4,1,-3,-2,12,-26,-28,-27,12,-9,-6,12,31,12,31,12,12,12,-8,-7,12,-30,-15,-11,-17,31,12,-13,31,12,12,12,-21,12,-29,-22,-14,-10,-24,-12,-23,-20,-25,-19,-16,]),'ID':([6,7,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,],[10,11,13,25,-26,-28,-27,13,-9,13,34,13,34,13,40,13,13,-8,13,-30,46,-15,-11,-17,34,13,-13,34,13,13,13,-21,13,-29,-22,-18,56,-14,-10,-24,-12,-23,-20,-25,-19,-16,]),'$end':([2,3,4,5,8,9,18,28,],[-5,-4,-1,0,-3,-2,-6,-7,]),'STRING':([10,13,14,15,16,17,19,21,23,25,26,27,29,30,33,36,37,39,40,41,42,43,44,45,49,50,51,52,54,55,57,],[14,-26,-28,-27,14,-9,14,14,14,14,14,-8,14,-30,-11,14,-13,14,14,14,-21,14,-29,-22,-10,-24,-12,-23,-20,-25,-19,]),'LBRACE':([0,2,3,4,8,9,18,28,],[6,-5,-4,6,-3,-2,-6,-7,]),'NUMBER':([10,13,14,15,16,17,19,21,23,25,26,27,29,30,33,36,37,39,40,41,42,43,44,45,49,50,51,52,54,55,57,],[15,-26,-28,-27,15,-9,15,15,15,15,15,-8,15,-30,-11,15,-13,15,15,15,-21,15,-29,-22,-10,-24,-12,-23,-20,-25,-19,]),'INPUT':([12,],[20,]),'OP_MUL':([12,],[21,]),'IMPORT':([1,],[7,]),'OUTPUT':([12,],[22,]),'RPAREN':([11,13,14,15,20,22,25,29,30,32,33,34,35,36,37,38,39,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-26,-28,-27,33,37,42,45,-30,-15,-11,-17,49,50,-13,51,52,54,-21,55,-29,-22,-14,-10,-24,-12,-23,57,-20,-25,58,-19,-16,]),'OP_SUB':([12,],[23,]),'ASSIGN':([12,],[24,]),'RBRACE':([13,14,15,16,17,27,33,37,42,45,49,50,51,52,54,55,57,],[-26,-28,-27,28,-9,-8,-11,-13,-21,-22,-10,-24,-12,-23,-20,-25,-19,]),'OP_DIV':([12,],[26,]),'OP_ADD':([12,],[19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,4,],[2,9,]),'parameter_list':([19,21,23,25,26,],[29,36,39,41,43,]),'declaration':([20,22,35,38,],[32,32,48,48,]),'type':([31,],[47,]),'import_statement':([0,4,],[3,8,]),'expression':([10,16,19,21,23,25,26,29,36,39,40,41,43,],[17,27,30,30,30,30,30,44,44,44,53,44,44,]),'program':([0,],[5,]),'statement_list':([0,],[4,]),'expression_list':([10,],[16,]),'declaration_list':([20,22,],[35,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
