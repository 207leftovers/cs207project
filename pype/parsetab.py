
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '371EF72B57DF7D01BB0A145AD73D5ADC'
    
_lr_action_items = {'RBRACE':([12,13,14,15,16,26,35,40,42,45,47,48,49,50,53,55,56,],[-9,-27,27,-28,-26,-8,-21,-13,-11,-24,-23,-25,-20,-22,-12,-10,-19,]),'LPAREN':([0,2,5,6,7,9,10,12,13,14,15,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,42,43,45,46,47,48,49,50,53,54,55,56,58,],[3,-5,-4,3,11,-2,-3,-9,-27,11,-28,-26,11,11,11,11,11,38,38,-8,-7,-6,11,11,-30,11,11,11,-21,11,-17,38,-13,-15,-11,38,-24,-29,-23,-25,-20,-22,-12,-14,-10,-19,-16,]),'ASSIGN':([11,],[18,]),'OP_MUL':([11,],[19,]),'IMPORT':([3,],[8,]),'STRING':([7,12,13,14,15,16,19,20,21,22,23,26,29,30,31,32,33,34,35,36,40,42,45,46,47,48,49,50,53,55,56,],[15,-9,-27,15,-28,-26,15,15,15,15,15,-8,15,15,-30,15,15,15,-21,15,-13,-11,-24,-29,-23,-25,-20,-22,-12,-10,-19,]),'OP_SUB':([11,],[20,]),'NUMBER':([7,12,13,14,15,16,19,20,21,22,23,26,29,30,31,32,33,34,35,36,40,42,45,46,47,48,49,50,53,55,56,],[13,-9,-27,13,-28,-26,13,13,13,13,13,-8,13,13,-30,13,13,13,-21,13,-13,-11,-24,-29,-23,-25,-20,-22,-12,-10,-19,]),'LBRACE':([0,2,5,6,9,10,27,28,],[1,-5,-4,1,-2,-3,-7,-6,]),'RPAREN':([13,15,16,17,22,24,25,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,],[-27,-28,-26,28,35,40,42,45,-30,47,48,49,-21,50,-17,53,-13,-15,-11,55,56,-24,-29,-23,-25,-20,-22,-12,-14,-10,-19,58,-16,]),'ID':([1,7,8,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[7,16,17,22,-9,-27,16,-28,-26,29,16,16,16,16,16,37,37,-8,16,16,-30,16,16,16,-21,16,-17,51,37,-13,-15,-11,37,-24,-29,-23,-25,-20,-22,-18,57,-12,-14,-10,-19,-16,]),'OP_ADD':([11,],[23,]),'$end':([2,4,5,6,9,10,27,28,],[-5,0,-4,-1,-2,-3,-7,-6,]),'OUTPUT':([11,],[24,]),'OP_DIV':([11,],[21,]),'INPUT':([11,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,6,],[2,9,]),'expression_list':([7,],[14,]),'declaration':([24,25,39,43,],[41,41,54,54,]),'type':([38,],[52,]),'parameter_list':([19,20,21,22,23,],[30,32,33,34,36,]),'program':([0,],[4,]),'import_statement':([0,6,],[5,10,]),'statement_list':([0,],[6,]),'declaration_list':([24,25,],[39,43,]),'expression':([7,14,19,20,21,22,23,29,30,32,33,34,36,],[12,26,31,31,31,31,31,44,46,46,46,46,46,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
