
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'B7DA2FE6C22431AB95D14A63E4FE0078'
    
_lr_action_items = {'$end':([1,2,4,5,8,9,19,28,],[0,-4,-1,-5,-3,-2,-7,-6,]),'STRING':([7,11,12,13,14,16,18,20,21,22,24,27,29,30,31,32,33,34,39,40,42,43,44,45,46,47,50,52,53,55,57,],[11,-28,-9,-27,11,-26,-8,11,11,11,11,11,-30,11,11,-21,11,-13,11,-11,11,11,-29,-23,-20,-22,-12,-24,-10,-25,-19,]),'OUTPUT':([15,],[23,]),'NUMBER':([7,11,12,13,14,16,18,20,21,22,24,27,29,30,31,32,33,34,39,40,42,43,44,45,46,47,50,52,53,55,57,],[13,-28,-9,-27,13,-26,-8,13,13,13,13,13,-30,13,13,-21,13,-13,13,-11,13,13,-29,-23,-20,-22,-12,-24,-10,-25,-19,]),'LBRACE':([0,2,4,5,8,9,19,28,],[3,-4,3,-5,-3,-2,-7,-6,]),'LPAREN':([0,2,4,5,7,8,9,11,12,13,14,16,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,55,57,58,],[6,-4,6,-5,15,-3,-2,-28,-9,-27,15,-26,-8,-7,15,15,15,35,15,35,15,-6,-30,15,15,-21,15,-13,-15,35,-17,15,-11,35,15,15,-29,-23,-20,-22,-12,-14,-24,-10,-25,-19,-16,]),'OP_SUB':([15,],[20,]),'OP_MUL':([15,],[24,]),'ID':([3,7,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[7,16,17,-28,-9,-27,16,21,-26,-8,16,16,16,38,16,38,42,16,-30,16,16,-21,16,-13,49,-15,38,-17,16,-11,38,16,16,-29,-23,-20,-22,56,-18,-12,-14,-24,-10,-25,-19,-16,]),'IMPORT':([6,],[10,]),'OP_ADD':([15,],[22,]),'INPUT':([15,],[25,]),'RPAREN':([11,13,16,17,21,23,25,29,30,31,32,33,34,36,37,38,39,40,41,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,32,34,40,-30,45,46,-21,47,-13,-15,50,-17,52,-11,53,55,-29,-23,-20,-22,-12,-14,-24,-10,57,-25,58,-19,-16,]),'OP_DIV':([15,],[27,]),'ASSIGN':([15,],[26,]),'RBRACE':([11,12,13,14,16,18,32,34,40,45,46,47,50,52,53,55,57,],[-28,-9,-27,19,-26,-8,-21,-13,-11,-23,-20,-22,-12,-24,-10,-25,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([20,21,22,24,27,],[30,31,33,39,43,]),'program':([0,],[1,]),'type':([35,],[48,]),'import_statement':([0,4,],[2,8,]),'expression_list':([7,],[14,]),'expression':([7,14,20,21,22,24,27,30,31,33,39,42,43,],[12,18,29,29,29,29,29,44,44,44,44,54,44,]),'statement_list':([0,],[4,]),'component':([0,4,],[5,9,]),'declaration':([23,25,37,41,],[36,36,51,51,]),'declaration_list':([23,25,],[37,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
