
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '55C53B9434ED5FC68BBE31AE8D09ED67'
    
_lr_action_items = {'OUTPUT':([14,],[24,]),'OP_MUL':([14,],[21,]),'NUMBER':([7,11,12,13,15,16,18,19,20,21,22,26,29,30,31,32,33,34,35,38,42,43,44,45,46,47,48,49,50,54,57,],[12,-9,-27,-28,12,-26,12,12,12,12,12,-8,-30,12,12,12,-21,12,12,-11,-13,12,-29,-25,-23,-20,-24,-22,-10,-12,-19,]),'OP_SUB':([14,],[19,]),'LBRACE':([0,2,3,4,8,9,27,28,],[1,-5,-4,1,-3,-2,-7,-6,]),'IMPORT':([6,],[10,]),'RPAREN':([12,13,16,17,20,23,24,29,30,31,32,33,34,35,36,37,38,40,41,42,44,45,46,47,48,49,50,51,54,55,56,57,58,],[-27,-28,-26,28,33,38,42,-30,45,46,47,-21,48,49,-17,50,-11,-15,54,-13,-29,-25,-23,-20,-24,-22,-10,-14,-12,57,58,-19,-16,]),'STRING':([7,11,12,13,15,16,18,19,20,21,22,26,29,30,31,32,33,34,35,38,42,43,44,45,46,47,48,49,50,54,57,],[13,-9,-27,-28,13,-26,13,13,13,13,13,-8,-30,13,13,13,-21,13,13,-11,-13,13,-29,-25,-23,-20,-24,-22,-10,-12,-19,]),'LPAREN':([0,2,3,4,7,8,9,11,12,13,15,16,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,54,57,58,],[6,-5,-4,6,14,-3,-2,-9,-27,-28,14,-26,14,14,14,14,14,39,39,-8,-7,-6,-30,14,14,14,-21,14,14,-17,39,-11,-15,39,-13,14,-29,-25,-23,-20,-24,-22,-10,-14,-12,-19,-16,]),'ID':([1,7,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[7,16,17,-9,-27,-28,20,16,-26,16,16,16,16,16,36,36,43,-8,-30,16,16,16,-21,16,16,-17,36,-11,52,-15,36,-13,16,-29,-25,-23,-20,-24,-22,-10,-14,-18,56,-12,-19,-16,]),'OP_ADD':([14,],[22,]),'INPUT':([14,],[23,]),'OP_DIV':([14,],[18,]),'$end':([2,3,4,5,8,9,27,28,],[-5,-4,-1,0,-3,-2,-7,-6,]),'RBRACE':([11,12,13,15,16,26,33,38,42,45,46,47,48,49,50,54,57,],[-9,-27,-28,27,-26,-8,-21,-11,-13,-25,-23,-20,-24,-22,-10,-12,-19,]),'ASSIGN':([14,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([7,15,18,19,20,21,22,30,31,32,34,35,43,],[11,26,29,29,29,29,29,44,44,44,44,44,55,]),'component':([0,4,],[2,9,]),'import_statement':([0,4,],[3,8,]),'type':([39,],[53,]),'declaration_list':([23,24,],[37,41,]),'statement_list':([0,],[4,]),'parameter_list':([18,19,20,21,22,],[30,31,32,34,35,]),'declaration':([23,24,37,41,],[40,40,51,51,]),'program':([0,],[5,]),'expression_list':([7,],[15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
