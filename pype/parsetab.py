
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '55C53B9434ED5FC68BBE31AE8D09ED67'
    
_lr_action_items = {'OUTPUT':([13,],[18,]),'RPAREN':([11,14,15,17,18,21,23,29,30,31,32,34,35,36,37,38,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-28,-26,-27,28,31,37,40,-15,-17,-13,45,48,-30,50,-21,51,-11,53,54,55,-14,-12,-22,-29,-23,-20,57,-10,-25,-24,58,-19,-16,]),'OP_ADD':([13,],[19,]),'STRING':([7,11,12,14,15,16,19,20,21,24,25,26,31,34,35,36,37,38,39,40,42,43,45,48,49,50,51,53,54,55,57,],[11,-28,-9,-26,-27,11,11,11,11,11,11,-8,-13,11,-30,11,-21,11,11,-11,11,11,-12,-22,-29,-23,-20,-10,-25,-24,-19,]),'IMPORT':([6,],[10,]),'LPAREN':([0,2,4,5,7,8,9,11,12,14,15,16,18,19,20,21,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,53,54,55,57,58,],[6,-5,6,-4,13,-2,-3,-28,-9,-26,-27,13,33,13,13,13,33,13,13,-8,-7,-6,-15,-17,-13,33,13,-30,13,-21,13,13,-11,33,13,13,-14,-12,-22,-29,-23,-20,-10,-25,-24,-19,-16,]),'OP_SUB':([13,],[20,]),'ID':([3,7,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,26,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[7,14,17,-28,-9,21,-26,-27,14,30,14,14,14,39,30,14,14,-8,-15,-17,-13,30,46,14,-30,14,-21,14,14,-11,30,14,14,-14,-12,-18,56,-22,-29,-23,-20,-10,-25,-24,-19,-16,]),'NUMBER':([7,11,12,14,15,16,19,20,21,24,25,26,31,34,35,36,37,38,39,40,42,43,45,48,49,50,51,53,54,55,57,],[15,-28,-9,-26,-27,15,15,15,15,15,15,-8,-13,15,-30,15,-21,15,15,-11,15,15,-12,-22,-29,-23,-20,-10,-25,-24,-19,]),'$end':([1,2,4,5,8,9,27,28,],[0,-5,-1,-4,-2,-3,-7,-6,]),'OP_MUL':([13,],[25,]),'ASSIGN':([13,],[22,]),'INPUT':([13,],[23,]),'OP_DIV':([13,],[24,]),'RBRACE':([11,12,14,15,16,26,31,37,40,45,48,50,51,53,54,55,57,],[-28,-9,-26,-27,27,-8,-13,-21,-11,-12,-22,-23,-20,-10,-25,-24,-19,]),'LBRACE':([0,2,4,5,8,9,27,28,],[3,-5,3,-4,-2,-3,-7,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration':([18,23,32,41,],[29,29,44,44,]),'program':([0,],[1,]),'import_statement':([0,4,],[5,9,]),'component':([0,4,],[2,8,]),'type':([33,],[47,]),'parameter_list':([19,20,21,24,25,],[34,36,38,42,43,]),'statement_list':([0,],[4,]),'declaration_list':([18,23,],[32,41,]),'expression':([7,16,19,20,21,24,25,34,36,38,39,42,43,],[12,26,35,35,35,35,35,49,49,49,52,49,49,]),'expression_list':([7,],[16,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
