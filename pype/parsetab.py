
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E1FCB2EDDF1216D4CA039394CC93A7CE'
    
_lr_action_items = {'ID':([3,7,8,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,],[7,11,17,-26,11,-28,-9,27,-27,-8,32,11,11,32,11,40,11,11,-13,32,-15,-17,46,-30,11,11,-11,32,11,11,11,11,-21,-12,-14,-18,56,-22,-29,-25,-10,-24,-23,-20,-19,-16,]),'$end':([1,2,5,6,9,10,19,28,],[-4,-5,0,-1,-3,-2,-7,-6,]),'IMPORT':([4,],[8,]),'OUTPUT':([15,],[20,]),'LBRACE':([0,1,2,6,9,10,19,28,],[3,-4,-5,3,-3,-2,-7,-6,]),'STRING':([7,11,12,13,14,16,18,21,22,24,26,27,29,34,35,36,37,39,40,41,42,43,44,48,49,50,51,52,54,55,57,],[13,-26,13,-28,-9,-27,-8,13,13,13,13,13,-13,-30,13,13,-11,13,13,13,13,-21,-12,-22,-29,-25,-10,-24,-23,-20,-19,]),'OP_ADD':([15,],[21,]),'RBRACE':([11,12,13,14,16,18,29,37,43,44,48,50,51,52,54,55,57,],[-26,19,-28,-9,-27,-8,-13,-11,-21,-12,-22,-25,-10,-24,-23,-20,-19,]),'INPUT':([15,],[23,]),'OP_MUL':([15,],[24,]),'ASSIGN':([15,],[25,]),'OP_SUB':([15,],[26,]),'OP_DIV':([15,],[22,]),'LPAREN':([0,1,2,6,7,9,10,11,12,13,14,16,18,19,20,21,22,23,24,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,54,55,57,58,],[4,-4,-5,4,15,-3,-2,-26,15,-28,-9,-27,-8,-7,33,15,15,33,15,15,15,-6,-13,33,-15,-17,-30,15,15,-11,33,15,15,15,15,-21,-12,-14,-22,-29,-25,-10,-24,-23,-20,-19,-16,]),'RPAREN':([11,13,16,17,20,23,27,29,30,31,32,34,35,36,37,38,39,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-26,-28,-27,28,29,37,43,-13,44,-15,-17,-30,48,50,-11,51,52,54,55,-21,-12,-14,-22,-29,-25,-10,-24,57,-23,-20,58,-19,-16,]),'NUMBER':([7,11,12,13,14,16,18,21,22,24,26,27,29,34,35,36,37,39,40,41,42,43,44,48,49,50,51,52,54,55,57,],[16,-26,16,-28,-9,-27,-8,16,16,16,16,16,-13,-30,16,16,-11,16,16,16,16,-21,-12,-22,-29,-25,-10,-24,-23,-20,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([21,22,24,26,27,],[35,36,39,41,42,]),'import_statement':([0,6,],[1,9,]),'type':([33,],[47,]),'declaration_list':([20,23,],[30,38,]),'expression_list':([7,],[12,]),'component':([0,6,],[2,10,]),'declaration':([20,23,30,38,],[31,31,45,45,]),'program':([0,],[5,]),'statement_list':([0,],[6,]),'expression':([7,12,21,22,24,26,27,35,36,39,40,41,42,],[14,18,34,34,34,34,34,49,49,49,53,49,49,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
