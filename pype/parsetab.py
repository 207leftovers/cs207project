
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '55C53B9434ED5FC68BBE31AE8D09ED67'
    
_lr_action_items = {'$end':([1,2,4,6,8,9,19,28,],[0,-5,-1,-4,-2,-3,-7,-6,]),'INPUT':([16,],[20,]),'ID':([3,7,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,57,58,],[7,11,17,-26,11,-9,-28,-27,21,-8,29,11,37,11,29,11,11,11,-17,29,46,-11,-15,-30,-21,11,11,11,29,-13,11,11,11,-10,-14,-18,56,-29,-20,-22,-12,-23,-25,-24,-19,-16,]),'ASSIGN':([16,],[22,]),'OP_ADD':([16,],[23,]),'STRING':([7,11,12,13,14,15,18,21,23,25,26,27,32,34,35,36,37,38,40,41,42,43,44,48,49,51,52,53,54,55,57,],[14,-26,14,-9,-28,-27,-8,14,14,14,14,14,-11,-30,-21,14,14,14,-13,14,14,14,-10,-29,-20,-22,-12,-23,-25,-24,-19,]),'LBRACE':([0,2,4,6,8,9,19,28,],[3,-5,3,-4,-2,-3,-7,-6,]),'IMPORT':([5,],[10,]),'RPAREN':([11,14,15,17,20,21,24,29,30,32,33,34,35,36,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-26,-28,-27,28,32,35,40,-17,44,-11,-15,-30,-21,49,51,52,-13,53,54,55,-10,-14,-29,-20,57,-22,-12,-23,-25,-24,58,-19,-16,]),'OP_SUB':([16,],[25,]),'OUTPUT':([16,],[24,]),'OP_DIV':([16,],[26,]),'RBRACE':([11,12,13,14,15,18,32,35,40,44,49,51,52,53,54,55,57,],[-26,19,-9,-28,-27,-8,-11,-21,-13,-10,-20,-22,-12,-23,-25,-24,-19,]),'NUMBER':([7,11,12,13,14,15,18,21,23,25,26,27,32,34,35,36,37,38,40,41,42,43,44,48,49,51,52,53,54,55,57,],[15,-26,15,-9,-28,-27,-8,15,15,15,15,15,-11,-30,-21,15,15,15,-13,15,15,15,-10,-29,-20,-22,-12,-23,-25,-24,-19,]),'LPAREN':([0,2,4,6,7,8,9,11,12,13,14,15,18,19,20,21,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,51,52,53,54,55,57,58,],[5,-5,5,-4,16,-2,-3,-26,16,-9,-28,-27,-8,-7,31,16,16,31,16,16,16,-6,-17,31,-11,-15,-30,-21,16,16,16,31,-13,16,16,16,-10,-14,-29,-20,-22,-12,-23,-25,-24,-19,-16,]),'OP_MUL':([16,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'declaration':([20,24,30,39,],[33,33,45,45,]),'component':([0,4,],[2,8,]),'declaration_list':([20,24,],[30,39,]),'statement_list':([0,],[4,]),'expression':([7,12,21,23,25,26,27,36,37,38,41,42,43,],[13,18,34,34,34,34,34,48,50,48,48,48,48,]),'type':([31,],[47,]),'parameter_list':([21,23,25,26,27,],[36,38,41,42,43,]),'expression_list':([7,],[12,]),'import_statement':([0,4,],[6,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
