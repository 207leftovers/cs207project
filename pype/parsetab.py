
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'ID':([4,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,58,],[9,11,17,-26,11,-27,-28,20,-9,-8,11,11,11,11,11,36,37,37,11,-21,-30,11,11,11,11,11,-17,37,-11,53,-15,37,-13,-20,-29,-24,-23,-25,-22,-10,-14,-18,57,-12,-19,-16,]),'OP_ADD':([15,],[24,]),'OP_MUL':([15,],[21,]),'RBRACE':([11,12,13,14,16,19,30,39,43,44,46,47,48,49,51,55,56,],[-26,18,-27,-28,-9,-8,-21,-11,-13,-20,-24,-23,-25,-22,-10,-12,-19,]),'LPAREN':([0,1,2,3,7,8,9,11,12,13,14,16,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,44,45,46,47,48,49,51,52,55,56,58,],[5,5,-4,-5,-3,-2,15,-26,15,-27,-28,-9,-7,-8,15,15,15,15,15,40,40,-6,15,-21,-30,15,15,15,15,15,-17,40,-11,-15,40,-13,-20,-29,-24,-23,-25,-22,-10,-14,-12,-19,-16,]),'OP_SUB':([15,],[22,]),'INPUT':([15,],[26,]),'$end':([1,2,3,6,7,8,18,28,],[-1,-4,-5,0,-3,-2,-7,-6,]),'NUMBER':([9,11,12,13,14,16,19,20,21,22,23,24,29,30,31,32,33,34,35,36,39,43,44,45,46,47,48,49,51,55,56,],[13,-26,13,-27,-28,-9,-8,13,13,13,13,13,13,-21,-30,13,13,13,13,13,-11,-13,-20,-29,-24,-23,-25,-22,-10,-12,-19,]),'IMPORT':([5,],[10,]),'ASSIGN':([15,],[25,]),'RPAREN':([11,13,14,17,20,26,27,29,30,31,32,33,34,35,37,38,39,41,42,43,44,45,46,47,48,49,50,51,52,55,56,57,58,],[-26,-27,-28,28,30,39,43,44,-21,-30,46,47,48,49,-17,51,-11,-15,55,-13,-20,-29,-24,-23,-25,-22,56,-10,-14,-12,-19,58,-16,]),'LBRACE':([0,1,2,3,7,8,18,28,],[4,4,-4,-5,-3,-2,-7,-6,]),'STRING':([9,11,12,13,14,16,19,20,21,22,23,24,29,30,31,32,33,34,35,36,39,43,44,45,46,47,48,49,51,55,56,],[14,-26,14,-27,-28,-9,-8,14,14,14,14,14,14,-21,-30,14,14,14,14,14,-11,-13,-20,-29,-24,-23,-25,-22,-10,-12,-19,]),'OP_DIV':([15,],[23,]),'OUTPUT':([15,],[27,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameter_list':([20,21,22,23,24,],[29,32,33,34,35,]),'statement_list':([0,],[1,]),'declaration':([26,27,38,42,],[41,41,52,52,]),'import_statement':([0,1,],[2,7,]),'expression_list':([9,],[12,]),'component':([0,1,],[3,8,]),'type':([40,],[54,]),'declaration_list':([26,27,],[38,42,]),'expression':([9,12,20,21,22,23,24,29,32,33,34,35,36,],[16,19,31,31,31,31,31,45,45,45,45,45,50,]),'program':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
