
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'B7DA2FE6C22431AB95D14A63E4FE0078'
    
_lr_action_items = {'RBRACE':([11,12,13,14,15,19,35,39,42,45,46,47,49,52,53,55,57,],[-9,-27,18,-26,-28,-8,-11,-21,-13,-23,-25,-24,-10,-20,-22,-12,-19,]),'OP_SUB':([16,],[20,]),'STRING':([7,11,12,13,14,15,19,20,21,22,24,25,29,30,31,32,35,38,39,40,41,42,44,45,46,47,49,52,53,55,57,],[15,-9,-27,15,-26,-28,-8,15,15,15,15,15,-30,15,15,15,-11,15,-21,15,15,-13,-29,-23,-25,-24,-10,-20,-22,-12,-19,]),'LBRACE':([0,2,3,5,8,9,18,28,],[4,-5,-4,4,-2,-3,-7,-6,]),'OP_MUL':([16,],[22,]),'NUMBER':([7,11,12,13,14,15,19,20,21,22,24,25,29,30,31,32,35,38,39,40,41,42,44,45,46,47,49,52,53,55,57,],[12,-9,-27,12,-26,-28,-8,12,12,12,12,12,-30,12,12,12,-11,12,-21,12,12,-13,-29,-23,-25,-24,-10,-20,-22,-12,-19,]),'$end':([1,2,3,5,8,9,18,28,],[0,-5,-4,-1,-2,-3,-7,-6,]),'INPUT':([16,],[23,]),'ID':([4,7,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[7,14,17,-9,-27,14,-26,-28,24,-8,14,14,14,33,14,14,41,33,-30,14,14,14,-17,-15,-11,33,51,14,-21,14,14,-13,33,-29,-23,-25,-24,-14,-10,56,-18,-20,-22,-12,-19,-16,]),'IMPORT':([6,],[10,]),'OP_ADD':([16,],[25,]),'RPAREN':([12,14,15,17,23,24,27,29,30,31,32,33,34,35,36,38,39,40,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,],[-27,-26,-28,28,35,39,42,-30,45,46,47,-17,-15,-11,49,52,-21,53,-13,55,-29,-23,-25,-24,-14,-10,-20,-22,57,-12,58,-19,-16,]),'ASSIGN':([16,],[26,]),'OUTPUT':([16,],[27,]),'LPAREN':([0,2,3,5,7,8,9,11,12,13,14,15,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,52,53,55,57,58,],[6,-5,-4,6,16,-2,-3,-9,-27,16,-26,-28,-7,-8,16,16,16,37,16,16,37,-6,-30,16,16,16,-17,-15,-11,37,16,-21,16,16,-13,37,-29,-23,-25,-24,-14,-10,-20,-22,-12,-19,-16,]),'OP_DIV':([16,],[21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'expression':([7,13,20,21,22,24,25,30,31,32,38,40,41,],[11,19,29,29,29,29,29,44,44,44,44,44,54,]),'parameter_list':([20,21,22,24,25,],[30,31,32,38,40,]),'declaration':([23,27,36,43,],[34,34,48,48,]),'expression_list':([7,],[13,]),'import_statement':([0,5,],[3,9,]),'declaration_list':([23,27,],[36,43,]),'type':([37,],[50,]),'component':([0,5,],[2,8,]),'statement_list':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
