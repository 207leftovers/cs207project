
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'ASSIGN':([15,],[21,]),'OP_DIV':([15,],[22,]),'RBRACE':([12,13,14,16,17,19,34,40,42,46,47,48,51,53,54,55,56,],[-9,20,-27,-28,-26,-8,-13,-11,-21,-25,-23,-22,-12,-24,-10,-20,-19,]),'OUTPUT':([15,],[25,]),'OP_SUB':([15,],[23,]),'RPAREN':([11,14,16,17,25,27,28,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,53,54,55,56,57,58,],[18,-27,-28,-26,34,40,42,-30,46,47,48,-13,-15,51,-17,53,-11,54,-21,55,56,-29,-25,-23,-22,-12,-14,-24,-10,-20,-19,58,-16,]),'LPAREN':([0,4,5,6,8,9,10,12,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,45,46,47,48,51,52,53,54,55,56,58,],[2,2,-4,-5,15,-3,-2,-9,15,-27,-28,-26,-6,-8,-7,15,15,15,35,15,35,15,15,-30,15,15,15,-13,-15,35,-17,15,-11,35,-21,15,-29,-25,-23,-22,-12,-14,-24,-10,-20,-19,-16,]),'OP_ADD':([15,],[24,]),'INPUT':([15,],[27,]),'LBRACE':([0,4,5,6,9,10,18,20,],[3,3,-4,-5,-3,-2,-6,-7,]),'NUMBER':([8,12,13,14,16,17,19,22,23,24,26,28,29,30,31,32,33,34,39,40,42,43,45,46,47,48,51,53,54,55,56,],[14,-9,14,-27,-28,-26,-8,14,14,14,14,14,14,-30,14,14,14,-13,14,-11,-21,14,-29,-25,-23,-22,-12,-24,-10,-20,-19,]),'IMPORT':([2,],[7,]),'$end':([1,4,5,6,9,10,18,20,],[0,-1,-4,-5,-3,-2,-6,-7,]),'OP_MUL':([15,],[26,]),'STRING':([8,12,13,14,16,17,19,22,23,24,26,28,29,30,31,32,33,34,39,40,42,43,45,46,47,48,51,53,54,55,56,],[16,-9,16,-27,-28,-26,-8,16,16,16,16,16,16,-30,16,16,16,-13,16,-11,-21,16,-29,-25,-23,-22,-12,-24,-10,-20,-19,]),'ID':([3,7,8,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,58,],[8,11,17,-9,17,-27,28,-28,-26,-8,29,17,17,17,38,17,38,17,17,-30,17,17,17,-13,50,-15,38,-17,17,-11,38,-21,17,-29,-25,-23,-22,57,-18,-12,-14,-24,-10,-20,-19,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'type':([35,],[49,]),'program':([0,],[1,]),'expression':([8,13,22,23,24,26,28,29,31,32,33,39,43,],[12,19,30,30,30,30,30,44,45,45,45,45,45,]),'declaration':([25,27,37,41,],[36,36,52,52,]),'expression_list':([8,],[13,]),'declaration_list':([25,27,],[37,41,]),'import_statement':([0,4,],[5,9,]),'statement_list':([0,],[4,]),'parameter_list':([22,23,24,26,28,],[31,32,33,39,43,]),'component':([0,4,],[6,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
