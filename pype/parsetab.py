
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '55C53B9434ED5FC68BBE31AE8D09ED67'
    
_lr_action_items = {'OP_MUL':([13,],[24,]),'INPUT':([13,],[27,]),'OP_ADD':([13,],[26,]),'IMPORT':([5,],[10,]),'OUTPUT':([13,],[21,]),'OP_SUB':([13,],[23,]),'ID':([2,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,],[9,12,17,12,-26,22,-9,-27,-28,-8,12,34,12,12,12,40,12,34,12,-30,-13,47,34,-17,-15,12,-21,12,12,12,12,-11,34,-25,-29,56,-18,-12,-14,-20,-23,-24,-22,-10,-19,-16,]),'ASSIGN':([13,],[25,]),'LBRACE':([0,1,3,6,7,8,19,28,],[2,2,-4,-5,-3,-2,-7,-6,]),'OP_DIV':([13,],[20,]),'RPAREN':([12,15,16,17,21,22,27,29,30,31,33,34,35,36,37,38,39,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-26,-27,-28,28,31,37,42,44,-30,-13,48,-17,-15,50,-21,51,52,54,-11,55,-25,-29,-12,-14,-20,-23,-24,57,-22,-10,58,-19,-16,]),'NUMBER':([9,11,12,14,15,16,18,20,22,23,24,26,29,30,31,36,37,38,39,40,41,42,44,45,48,50,51,52,54,55,57,],[15,15,-26,-9,-27,-28,-8,15,15,15,15,15,15,-30,-13,15,-21,15,15,15,15,-11,-25,-29,-12,-20,-23,-24,-22,-10,-19,]),'LPAREN':([0,1,3,6,7,8,9,11,12,14,15,16,18,19,20,21,22,23,24,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,54,55,57,58,],[5,5,-4,-5,-3,-2,13,13,-26,-9,-27,-28,-8,-7,13,32,13,13,13,13,32,-6,13,-30,-13,32,-17,-15,13,-21,13,13,13,13,-11,32,-25,-29,-12,-14,-20,-23,-24,-22,-10,-19,-16,]),'STRING':([9,11,12,14,15,16,18,20,22,23,24,26,29,30,31,36,37,38,39,40,41,42,44,45,48,50,51,52,54,55,57,],[16,16,-26,-9,-27,-28,-8,16,16,16,16,16,16,-30,-13,16,-21,16,16,16,16,-11,-25,-29,-12,-20,-23,-24,-22,-10,-19,]),'$end':([1,3,4,6,7,8,19,28,],[-1,-4,0,-5,-3,-2,-7,-6,]),'RBRACE':([11,12,14,15,16,18,31,37,42,44,48,50,51,52,54,55,57,],[19,-26,-9,-27,-28,-8,-13,-21,-11,-25,-12,-20,-23,-24,-22,-10,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,],[1,]),'parameter_list':([20,22,23,24,26,],[29,36,38,39,41,]),'import_statement':([0,1,],[3,7,]),'program':([0,],[4,]),'expression':([9,11,20,22,23,24,26,29,36,38,39,40,41,],[14,18,30,30,30,30,30,45,45,45,45,53,45,]),'type':([32,],[46,]),'expression_list':([9,],[11,]),'declaration_list':([21,27,],[33,43,]),'declaration':([21,27,33,43,],[35,35,49,49,]),'component':([0,1,],[6,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
