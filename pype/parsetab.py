
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D7D1BCF469A7160DABB9E0C3456A50E8'
    
_lr_action_items = {'NUMBER':([9,11,12,13,15,16,19,21,23,24,25,27,33,34,35,37,38,39,40,41,42,43,45,48,49,50,51,52,53,55,57,],[11,-27,-26,11,-9,-28,-8,11,11,11,11,11,-13,11,-30,-11,11,11,-21,11,11,11,-12,-29,-25,-10,-24,-20,-23,-22,-19,]),'IMPORT':([5,],[10,]),'OUTPUT':([14,],[20,]),'OP_DIV':([14,],[21,]),'OP_ADD':([14,],[27,]),'INPUT':([14,],[22,]),'LBRACE':([0,1,2,6,7,8,18,28,],[3,-4,3,-5,-3,-2,-7,-6,]),'ASSIGN':([14,],[26,]),'STRING':([9,11,12,13,15,16,19,21,23,24,25,27,33,34,35,37,38,39,40,41,42,43,45,48,49,50,51,52,53,55,57,],[16,-27,-26,16,-9,-28,-8,16,16,16,16,16,-13,16,-30,-11,16,16,-21,16,16,16,-12,-29,-25,-10,-24,-20,-23,-22,-19,]),'$end':([1,2,4,6,7,8,18,28,],[-4,-1,0,-5,-3,-2,-7,-6,]),'ID':([3,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,57,58,],[9,12,17,-27,-26,12,24,-9,-28,-8,31,12,31,12,12,12,42,12,31,46,-17,-15,-13,12,-30,31,-11,12,12,-21,12,12,12,-14,-12,-18,56,-29,-25,-10,-24,-20,-23,-22,-19,-16,]),'OP_SUB':([14,],[25,]),'LPAREN':([0,1,2,6,7,8,9,11,12,13,15,16,18,19,20,21,22,23,24,25,27,28,29,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,53,55,57,58,],[5,-4,5,-5,-3,-2,14,-27,-26,14,-9,-28,-7,-8,30,14,30,14,14,14,14,-6,30,-17,-15,-13,14,-30,30,-11,14,14,-21,14,14,14,-14,-12,-29,-25,-10,-24,-20,-23,-22,-19,-16,]),'RBRACE':([11,12,13,15,16,19,33,37,40,45,49,50,51,52,53,55,57,],[-27,-26,18,-9,-28,-8,-13,-11,-21,-12,-25,-10,-24,-20,-23,-22,-19,]),'RPAREN':([11,12,16,17,20,22,24,29,31,32,33,34,35,36,37,38,39,40,41,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[-27,-26,-28,28,33,37,40,45,-17,-15,-13,49,-30,50,-11,51,52,-21,53,55,-14,-12,-29,-25,-10,-24,-20,-23,57,-22,58,-19,-16,]),'OP_MUL':([14,],[23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'import_statement':([0,2,],[1,7,]),'expression_list':([9,],[13,]),'statement_list':([0,],[2,]),'type':([30,],[47,]),'program':([0,],[4,]),'parameter_list':([21,23,24,25,27,],[34,38,39,41,43,]),'component':([0,2,],[6,8,]),'expression':([9,13,21,23,24,25,27,34,38,39,41,42,43,],[15,19,35,35,35,35,35,48,48,48,48,54,48,]),'declaration':([20,22,29,36,],[32,32,44,44,]),'declaration_list':([20,22,],[29,36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
