
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D7D1BCF469A7160DABB9E0C3456A50E8'
    
_lr_action_items = {'OP_MUL':([16,],[20,]),'LBRACE':([0,3,4,6,8,9,19,28,],[1,1,-5,-4,-2,-3,-7,-6,]),'OP_DIV':([16,],[25,]),'RBRACE':([11,12,13,14,15,18,34,37,42,45,46,50,52,53,54,55,57,],[-9,-28,19,-27,-26,-8,-13,-11,-21,-24,-12,-10,-23,-25,-22,-20,-19,]),'STRING':([7,11,12,13,14,15,18,20,24,25,26,27,29,30,34,37,38,39,40,41,42,43,44,45,46,50,52,53,54,55,57,],[12,-9,-28,12,-27,-26,-8,12,12,12,12,12,-30,12,-13,-11,12,12,12,12,-21,12,-29,-24,-12,-10,-23,-25,-22,-20,-19,]),'INPUT':([16,],[22,]),'OUTPUT':([16,],[21,]),'ASSIGN':([16,],[23,]),'LPAREN':([0,3,4,6,7,8,9,11,12,13,14,15,18,19,20,21,22,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,50,52,53,54,55,57,58,],[5,5,-5,-4,16,-2,-3,-9,-28,16,-27,-26,-8,-7,16,33,33,16,16,16,16,-6,-30,16,-17,33,-13,-15,33,-11,16,16,16,16,-21,16,-29,-24,-12,-14,-10,-23,-25,-22,-20,-19,-16,]),'ID':([1,7,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,57,58,],[7,15,17,-9,-28,15,-27,-26,27,-8,15,31,31,38,15,15,15,15,-30,15,-17,31,49,-13,-15,31,-11,15,15,15,15,-21,15,-29,-24,-12,-14,56,-18,-10,-23,-25,-22,-20,-19,-16,]),'NUMBER':([7,11,12,13,14,15,18,20,24,25,26,27,29,30,34,37,38,39,40,41,42,43,44,45,46,50,52,53,54,55,57,],[14,-9,-28,14,-27,-26,-8,14,14,14,14,14,-30,14,-13,-11,14,14,14,14,-21,14,-29,-24,-12,-10,-23,-25,-22,-20,-19,]),'IMPORT':([5,],[10,]),'OP_SUB':([16,],[24,]),'OP_ADD':([16,],[26,]),'$end':([2,3,4,6,8,9,19,28,],[0,-1,-5,-4,-2,-3,-7,-6,]),'RPAREN':([12,14,15,17,21,22,27,29,30,31,32,34,35,36,37,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,34,37,42,-30,45,-17,46,-13,-15,50,-11,52,53,54,-21,55,-29,-24,-12,-14,-10,57,-23,-25,-22,-20,58,-19,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_list':([7,],[13,]),'program':([0,],[2,]),'statement_list':([0,],[3,]),'component':([0,3,],[4,8,]),'declaration':([21,22,32,36,],[35,35,47,47,]),'declaration_list':([21,22,],[32,36,]),'parameter_list':([20,24,25,26,27,],[30,39,40,41,43,]),'type':([33,],[48,]),'expression':([7,13,20,24,25,26,27,30,38,39,40,41,43,],[11,18,29,29,29,29,29,44,51,44,44,44,44,]),'import_statement':([0,3,],[6,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
