
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '55C53B9434ED5FC68BBE31AE8D09ED67'
    
_lr_action_items = {'IMPORT':([4,],[9,]),'OP_SUB':([15,],[23,]),'RPAREN':([11,12,13,17,21,24,28,29,30,31,32,33,34,35,36,38,40,41,42,43,44,45,46,47,48,49,52,53,54,55,56,57,58,],[18,-28,-26,-27,29,35,43,-21,-30,44,46,47,48,-13,-17,-15,53,54,55,-11,-20,-29,-22,-23,-12,-14,57,-25,-24,-10,58,-19,-16,]),'RBRACE':([12,13,14,16,17,20,29,35,43,44,46,47,48,53,54,55,57,],[-28,-26,19,-9,-27,-8,-21,-13,-11,-20,-22,-23,-12,-25,-24,-10,-19,]),'OP_ADD':([15,],[22,]),'OUTPUT':([15,],[24,]),'LPAREN':([0,2,3,5,7,8,10,12,13,14,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,38,39,40,41,42,43,44,45,46,47,48,49,53,54,55,57,58,],[4,4,-4,-5,-3,-2,15,-28,-26,15,-9,-27,-6,-7,-8,15,15,15,37,15,15,37,-21,-30,15,15,15,37,-13,-17,-15,15,15,15,37,-11,-20,-29,-22,-23,-12,-14,-25,-24,-10,-19,-16,]),'NUMBER':([10,12,13,14,16,17,20,21,22,23,26,27,29,30,31,32,33,35,39,40,41,43,44,45,46,47,48,53,54,55,57,],[17,-28,-26,17,-9,-27,-8,17,17,17,17,17,-21,-30,17,17,17,-13,17,17,17,-11,-20,-29,-22,-23,-12,-25,-24,-10,-19,]),'ID':([6,9,10,12,13,14,15,16,17,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[10,11,13,-28,-26,13,21,-9,-27,-8,13,13,13,36,39,13,13,36,-21,-30,13,13,13,36,-13,-17,51,-15,13,13,13,36,-11,-20,-29,-22,-23,-12,-14,56,-18,-25,-24,-10,-19,-16,]),'STRING':([10,12,13,14,16,17,20,21,22,23,26,27,29,30,31,32,33,35,39,40,41,43,44,45,46,47,48,53,54,55,57,],[12,-28,-26,12,-9,-27,-8,12,12,12,12,12,-21,-30,12,12,12,-13,12,12,12,-11,-20,-29,-22,-23,-12,-25,-24,-10,-19,]),'ASSIGN':([15,],[25,]),'OP_DIV':([15,],[26,]),'$end':([1,2,3,5,7,8,18,19,],[0,-1,-4,-5,-3,-2,-6,-7,]),'OP_MUL':([15,],[27,]),'INPUT':([15,],[28,]),'LBRACE':([0,2,3,5,7,8,18,19,],[6,6,-4,-5,-3,-2,-6,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaration_list':([24,28,],[34,42,]),'type':([37,],[50,]),'parameter_list':([21,22,23,26,27,],[31,32,33,40,41,]),'program':([0,],[1,]),'import_statement':([0,2,],[3,7,]),'expression_list':([10,],[14,]),'statement_list':([0,],[2,]),'expression':([10,14,21,22,23,26,27,31,32,33,39,40,41,],[16,20,30,30,30,30,30,45,45,45,52,45,45,]),'declaration':([24,28,34,42,],[38,38,49,49,]),'component':([0,2,],[5,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_add','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_sub','parser.py',96),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_mul','parser.py',100),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_div','parser.py',104),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',108),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',112),
  ('expression -> STRING','expression',1,'p_string','parser.py',116),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',120),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',121),
]
