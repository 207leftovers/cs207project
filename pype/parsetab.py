
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'ID':([3,9,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,58,],[9,11,17,-26,-9,-28,11,-27,20,-8,11,32,11,11,11,36,11,36,-30,11,-21,11,11,11,11,-17,-15,36,52,-13,11,36,-11,-29,-20,-23,-25,-22,-14,-12,-18,57,-24,-10,-19,-16,]),'IMPORT':([5,],[10,]),'STRING':([9,11,12,13,14,15,18,20,22,23,24,26,29,30,31,32,33,34,35,40,41,43,44,45,47,48,49,51,54,55,56,],[13,-26,-9,-28,13,-27,-8,13,13,13,13,13,-30,13,-21,13,13,13,13,-13,13,-11,-29,-20,-23,-25,-22,-12,-24,-10,-19,]),'OP_DIV':([16,],[23,]),'ASSIGN':([16,],[21,]),'LPAREN':([0,1,2,6,7,8,9,11,12,13,14,15,18,19,20,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,47,48,49,50,51,54,55,56,58,],[5,-5,5,-4,-2,-3,16,-26,-9,-28,16,-27,-8,-7,16,16,16,16,39,16,39,-6,-30,16,-21,16,16,16,16,-17,-15,39,-13,16,39,-11,-29,-20,-23,-25,-22,-14,-12,-24,-10,-19,-16,]),'OP_ADD':([16,],[24,]),'OP_SUB':([16,],[22,]),'NUMBER':([9,11,12,13,14,15,18,20,22,23,24,26,29,30,31,32,33,34,35,40,41,43,44,45,47,48,49,51,54,55,56,],[15,-26,-9,-28,15,-27,-8,15,15,15,15,15,-30,15,-21,15,15,15,15,-13,15,-11,-29,-20,-23,-25,-22,-12,-24,-10,-19,]),'OUTPUT':([16,],[25,]),'LBRACE':([0,1,2,6,7,8,19,28,],[3,-5,3,-4,-2,-3,-7,-6,]),'OP_MUL':([16,],[26,]),'INPUT':([16,],[27,]),'RPAREN':([11,13,15,17,20,25,27,29,30,31,33,34,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,57,58,],[-26,-28,-27,28,31,40,43,-30,45,-21,47,48,49,-17,-15,51,-13,54,55,-11,-29,-20,56,-23,-25,-22,-14,-12,-24,-10,-19,58,-16,]),'RBRACE':([11,12,13,14,15,18,31,40,43,45,47,48,49,51,54,55,56,],[-26,-9,-28,19,-27,-8,-21,-13,-11,-20,-23,-25,-22,-12,-24,-10,-19,]),'$end':([1,2,4,6,7,8,19,28,],[-5,-1,0,-4,-2,-3,-7,-6,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,2,],[1,7,]),'statement_list':([0,],[2,]),'import_statement':([0,2,],[6,8,]),'expression':([9,14,20,22,23,24,26,30,32,33,34,35,41,],[12,18,29,29,29,29,29,44,46,44,44,44,44,]),'declaration_list':([25,27,],[38,42,]),'type':([39,],[53,]),'declaration':([25,27,38,42,],[37,37,50,50,]),'program':([0,],[4,]),'expression_list':([9,],[14,]),'parameter_list':([20,22,23,24,26,],[30,33,34,35,41,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
