
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D7D1BCF469A7160DABB9E0C3456A50E8'
    
_lr_action_items = {'LPAREN':([0,1,4,5,8,9,10,13,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,52,53,54,55,57,58,],[2,-5,-4,2,-2,-3,12,-28,12,-9,-26,-27,-6,12,32,12,12,32,12,12,-8,-7,12,-30,-17,32,-15,-11,12,12,12,32,-13,12,-21,12,-29,-25,-14,-10,-24,-23,-12,-20,-22,-19,-16,]),'NUMBER':([10,13,14,15,16,17,19,21,23,25,26,27,29,30,35,36,37,38,40,41,42,43,44,45,49,50,52,53,54,55,57,],[17,-28,17,-9,-26,-27,17,17,17,17,17,-8,17,-30,-11,17,17,17,-13,17,-21,17,-29,-25,-10,-24,-23,-12,-20,-22,-19,]),'STRING':([10,13,14,15,16,17,19,21,23,25,26,27,29,30,35,36,37,38,40,41,42,43,44,45,49,50,52,53,54,55,57,],[13,-28,13,-9,-26,-27,13,13,13,13,13,-8,13,-30,-11,13,13,13,-13,13,-21,13,-29,-25,-10,-24,-23,-12,-20,-22,-19,]),'IMPORT':([2,],[7,]),'INPUT':([12,],[20,]),'LBRACE':([0,1,4,5,8,9,18,28,],[6,-5,-4,6,-2,-3,-6,-7,]),'OP_MUL':([12,],[21,]),'ASSIGN':([12,],[22,]),'RBRACE':([13,14,15,16,17,27,35,40,42,45,49,50,52,53,54,55,57,],[-28,28,-9,-26,-27,-8,-11,-13,-21,-25,-10,-24,-23,-12,-20,-22,-19,]),'OP_SUB':([12,],[23,]),'OUTPUT':([12,],[24,]),'$end':([1,3,4,5,8,9,18,28,],[-5,0,-4,-1,-2,-3,-6,-7,]),'RPAREN':([11,13,16,17,20,24,25,29,30,31,33,34,35,36,38,39,40,41,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-28,-26,-27,35,40,42,45,-30,-17,49,-15,-11,50,52,53,-13,54,-21,55,-29,-25,-14,-10,-24,57,-23,-12,-20,-22,58,-19,-16,]),'OP_ADD':([12,],[26,]),'ID':([6,7,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,52,53,54,55,57,58,],[10,11,16,25,-28,16,-9,-26,-27,16,31,16,37,16,31,16,16,-8,16,-30,-17,46,31,-15,-11,16,16,16,31,-13,16,-21,16,-29,-25,-18,56,-14,-10,-24,-23,-12,-20,-22,-19,-16,]),'OP_DIV':([12,],[19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,5,],[1,8,]),'parameter_list':([19,21,23,25,26,],[29,36,38,41,43,]),'declaration':([20,24,33,39,],[34,34,48,48,]),'expression':([10,14,19,21,23,25,26,29,36,37,38,41,43,],[15,27,30,30,30,30,30,44,44,51,44,44,44,]),'declaration_list':([20,24,],[33,39,]),'import_statement':([0,5,],[4,9,]),'program':([0,],[3,]),'statement_list':([0,],[5,]),'type':([32,],[47,]),'expression_list':([10,],[14,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',8),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',14),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',15),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',16),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_inputExpr','parser.py',43),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_inputExpr','parser.py',44),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_outputExpr','parser.py',51),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_outputExpr','parser.py',52),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',59),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',60),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_id','parser.py',68),
  ('declaration -> ID','declaration',1,'p_id','parser.py',69),
  ('type -> ID','type',1,'p_type_id','parser.py',76),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_assignExpr','parser.py',80),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_named_function_operation','parser.py',84),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_named_function_operation','parser.py',85),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',92),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',95),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',98),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',101),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',105),
  ('expression -> NUMBER','expression',1,'p_number','parser.py',109),
  ('expression -> STRING','expression',1,'p_string','parser.py',113),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',117),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',118),
]
